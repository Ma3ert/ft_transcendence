// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  INMATCH
}

model User {
  id                    String     @id @default(uuid())
  username              String     @unique
  email                 String     @unique
  avatar                String
  twoFactorRetry        Int        @default(0)
  twoFactor             Boolean    @default(false)
  twoFactorPin          String?
  activated             Boolean    @default(false)
  pinValidated          Boolean    @default(false)
  status                UserStatus @default(ONLINE)  
  directmessageSent     DirectMessage[]  @relation("DMsent")
  directmessageReceived DirectMessage[]  @relation("DMreceived")

  channelMessages       ChannelMessage[] @relation("userChannelMsg")

  channels              ChannelUser[]    @relation("memberOfChannel")

  channelBan            ChannelBan[]     @relation("UserbannedInChannel")

  channelMute           ChannelMute[]     @relation("UserMutedInchannel")

  channelInviteSent     ChannelInvite[]  @relation("ChannelInviteSent")
  channelInviteReceived ChannelInvite[]  @relation("ChannelInviteReceived")

  created_at            DateTime @default(now())
}

model DirectMessage {
  id         String   @id @default(uuid())

  senderId   String
  sender     User     @relation(fields:[senderId], references:[id], onDelete: Cascade, name:"DMsent")

  receiverId String
  receiver   User     @relation(fields:[receiverId], references:[id], onDelete: Cascade, name:"DMreceived")

  content    String

  cursor     String?

  create_at  DateTime @default(now())
}

model ChannelMessage {
  id        String    @id @default(uuid())

  channelId String
  channel   Channel   @relation(fields:[channelId], references:[id], onDelete:Cascade, name:"channelMsg")

  userId    String
  user      User     @relation(fields:[userId], references:[id], onDelete: Cascade, name:"userChannelMsg")

  content   String

  create_at DateTime @default(now())
}


model Channel {
  id                String           @id @default(uuid())
  name              String
  type              Type
  password          String?
  avatar            String?

  messages          ChannelMessage[] @relation("channelMsg")

  members           ChannelUser[]    @relation("channelMembers")

  bannedUsers       ChannelBan[]     @relation("ChannelBannedUser")

  mutedUsers        ChannelMute[]    @relation("ChannelMutedUser")

  channelInvitation ChannelInvite[]  @relation("channelInvite")

  created_at        DateTime         @default(now())
  
  updated_at        DateTime         @updatedAt
}

model ChannelUser {
  userId    String
  user      User    @relation(fields:[userId], references:[id], onDelete: Cascade, name:"memberOfChannel")

  channelId String 
  channel   Channel @relation(fields:[channelId], references:[id], onDelete: Cascade, name:"channelMembers")

  role Role
  @@id([userId, channelId], name:"channelUser")
}

model ChannelBan {
  userId    String
  user      User    @relation(fields:[userId], references:[id], onDelete: Cascade, name:"UserbannedInChannel")

  channelId String
  channel   Channel  @relation(fields:[channelId], references:[id], onDelete: Cascade, name:"ChannelBannedUser")

  @@id([userId, channelId])
  created_at DateTime @default(now())
}

model ChannelMute{
  userId     String
  user       User    @relation(fields:[userId], references:[id], onDelete: Cascade, name:"UserMutedInchannel")

  channelId  String
  channel    Channel  @relation(fields:[channelId], references:[id], onDelete: Cascade, name:"ChannelMutedUser")

  startMute  DateTime

  mutePeriod Int

  isMuted    Boolean  

  @@id([userId, channelId])
  created_at DateTime @default(now())
}

model ChannelInvite {
  id          String   @id @default(uuid())
  
  senderId    String
  sender      User     @relation(fields:[senderId], references:[id], onDelete: Cascade, name:"ChannelInviteSent")

  receiverId  String
  receiver    User     @relation(fields:[receiverId], references:[id], onDelete: Cascade, name:"ChannelInviteReceived")
  
  channelId   String
  channel     Channel  @relation(fields:[channelId], references:[id], onDelete: Cascade, name:"channelInvite")
  
  created_at  DateTime @default(now())
}

enum Type{
  PUBLIC
  PRIVATE
  PROTECTED
}

enum Role{
  OWNER
  MEMBER
  ADMIN
}

